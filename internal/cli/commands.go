package cli

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"
	"log"
	"os"
	"path/filepath"
	"runtime/debug"
	"strings"
	"time"

	"github.com/typelate/muxt/internal/muxt"
)

func Commands(wd string, args []string, getEnv func(string) string, stdout, stderr io.Writer) error {
	if len(args) <= 1 {
		return writeHelp(stdout)
	}
	args = args[1:]
	var err error
	wd, args, err = global(wd, args, stderr)
	if err != nil {
		return err
	}
	switch cmd, cmdArgs := args[0], args[1:]; cmd {
	case "help":
		return writeHelp(stdout)
	case "generate", "gen", "g":
		return generateCommand(wd, cmdArgs, getEnv, stdout, stderr)
	case "version", "v":
		return versionCommand(stdout)
	case "check", "c", "typelate":
		return checkCommand(wd, cmdArgs, stderr)
	case "documentation", "docs", "d":
		return documentationCommand(wd, cmdArgs, stdout, stderr)
	default:
		return fmt.Errorf("unknown command")
	}
}

func checkCommand(workingDirectory string, args []string, stderr io.Writer) error {
	config, err := newRoutesFileConfiguration(args, stderr)
	if err != nil {
		return err
	}
	if err := muxt.Check(workingDirectory, log.New(stderr, "", 0), config); err != nil {
		return fmt.Errorf("fail: %s", err)
	}
	return nil
}

const (
	codeGenerationComment = `// Code generated by muxt. DO NOT EDIT.` + "\n"
	codeGenerationLicense = `// MIT License
//
// Copyright (c) %d %s
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
`
)

func generateCommand(workingDirectory string, args []string, getEnv func(string) string, stdout, stderr io.Writer) error {
	config, err := newRoutesFileConfiguration(args, stderr)
	if err != nil {
		return err
	}
	if v, ok := cliVersion(); ok {
		config.MuxtVersion = v
	}
	s, err := muxt.TemplateRoutesFile(workingDirectory, log.New(stdout, "", 0), config)
	if err != nil {
		return err
	}
	var sb bytes.Buffer
	writeCodeGenerationComment(&sb)
	sb.WriteString(s)
	return os.WriteFile(filepath.Join(workingDirectory, config.OutputFileName), sb.Bytes(), 0o644)
}

func writeCodeGenerationComment(w io.StringWriter) {
	_, _ = w.WriteString(fmt.Sprintf(codeGenerationComment))
	if v, ok := cliVersion(); ok {
		_, _ = w.WriteString("// muxt version: ")
		_, _ = w.WriteString(v)
		_, _ = w.WriteString("\n//\n")
	}
	_, _ = w.WriteString(fmt.Sprintf(codeGenerationLicense, time.Now().Year(), "Christopher Hunter"))
}

//go:embed help.txt
var helpText string

func writeHelp(stdout io.Writer) error {
	var help strings.Builder
	help.WriteString(helpText)
	flagSet := RoutesFileConfigurationFlagSet(new(muxt.RoutesFileConfiguration))
	flagSet.SetOutput(&help)
	flagSet.PrintDefaults()
	_, err := fmt.Fprint(stdout, help.String())
	return err
}

func documentationCommand(wd string, args []string, stdout, stderr io.Writer) error {
	config, err := newRoutesFileConfiguration(args, stderr)
	if err != nil {
		return err
	}
	return muxt.Documentation(stdout, wd, config)
}

func versionCommand(stdout io.Writer) error {
	v, ok := cliVersion()
	if !ok {
		return fmt.Errorf("missing CLI version")
	}
	_, err := fmt.Fprintln(stdout, v)
	return err
}

func cliVersion() (string, bool) {
	bi, ok := debug.ReadBuildInfo()
	if !ok || bi.Main.Version == "" {
		return "", false
	}
	return bi.Main.Version, true
}
