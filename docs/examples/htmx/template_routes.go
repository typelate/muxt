// Code generated by muxt generate --use-receiver-type=Server. DO NOT EDIT.
// muxt version: (devel)
package hypertext

import (
	"cmp"
	"errors"
	"fmt"
	"net/http"
	"path"
)

type RoutesReceiver interface {
	TemplateRoutesReceiver
}

func TemplateRoutes(mux *http.ServeMux, receiver RoutesReceiver) TemplateRoutePaths {
	pathsPrefix := ""
	TemplateTemplateRoutes(mux, receiver, pathsPrefix)
	return TemplateRoutePaths{pathsPrefix: pathsPrefix}
}

type TemplateData[R any, T any] struct {
	receiver      R
	response      http.ResponseWriter
	request       *http.Request
	result        T
	statusCode    int
	errStatusCode int
	okay          bool
	errList       []error
	redirectURL   string
	pathsPrefix   string
}

func (data *TemplateData[R, T]) MuxtVersion() string {
	const muxtVersion = "(devel)"
	return muxtVersion
}

func (data *TemplateData[R, T]) Path() TemplateRoutePaths {
	return TemplateRoutePaths{pathsPrefix: data.pathsPrefix}
}

func (data *TemplateData[R, T]) Result() T {
	return data.result
}

func (data *TemplateData[R, T]) Request() *http.Request {
	return data.request
}

func (data *TemplateData[R, T]) StatusCode(statusCode int) *TemplateData[R, T] {
	data.statusCode = statusCode
	return data
}

func (data *TemplateData[R, T]) Header(key, value string) *TemplateData[R, T] {
	data.response.Header().Set(key, value)
	return data
}

func (data *TemplateData[R, T]) Ok() bool {
	return data.okay
}

func (data *TemplateData[R, T]) Err() error {
	return errors.Join(data.errList...)
}

func (data *TemplateData[R, T]) Receiver() R {
	return data.receiver
}

func (data *TemplateData[R, T]) Redirect(url string, code int) (*TemplateData[R, T], error) {
	if code < 300 || code >= 400 {
		return data, fmt.Errorf("invalid status code %d for redirect", code)
	}
	data.redirectURL = url
	return data.StatusCode(code), nil
}

type TemplateRoutePaths struct {
	pathsPrefix string
}

func (routePaths TemplateRoutePaths) Count() string {
	return "/"
}

func (routePaths TemplateRoutePaths) CreateCount() string {
	return path.Join(cmp.Or(routePaths.pathsPrefix, "/"), "count")
}

func (routePaths TemplateRoutePaths) Decrement() string {
	return path.Join(cmp.Or(routePaths.pathsPrefix, "/"), "decrement-count")
}

func (routePaths TemplateRoutePaths) Increment() string {
	return path.Join(cmp.Or(routePaths.pathsPrefix, "/"), "increment-count")
}
