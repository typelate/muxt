// Code generated by muxt generate --receiver-type=Server. DO NOT EDIT.
// muxt version: (devel)
package hypertext

import (
	"bytes"
	"cmp"
	"errors"
	"fmt"
	"log/slog"
	"net/http"
	"path"
	"strconv"
)

type RoutesReceiver interface {
	Count() int64
	Decrement() int64
	Increment() int64
}

func TemplateRoutes(mux *http.ServeMux, receiver RoutesReceiver) TemplateRoutePaths {
	pathsPrefix := ""
	mux.HandleFunc("/", func(response http.ResponseWriter, request *http.Request) {
		var td = TemplateData[int64]{receiver: receiver, response: response, request: request, pathsPrefix: pathsPrefix}
		if len(td.errList) == 0 {
			td.result = receiver.Count()
			td.okay = true
		}
		buf := bytes.NewBuffer(nil)
		if err := templates.ExecuteTemplate(buf, "/ Count()", &td); err != nil {
			slog.ErrorContext(request.Context(), "failed to render page", slog.String("path", request.URL.Path), slog.String("pattern", request.Pattern), slog.String("error", err.Error()))
			http.Error(response, "failed to render page", http.StatusInternalServerError)
			return
		}
		statusCode := cmp.Or(td.statusCode, td.errStatusCode, http.StatusOK)
		if td.redirectURL != "" {
			http.Redirect(response, request, td.redirectURL, statusCode)
			return
		}
		if contentType := response.Header().Get("content-type"); contentType == "" {
			response.Header().Set("content-type", "text/html; charset=utf-8")
		}
		response.Header().Set("content-length", strconv.Itoa(buf.Len()))
		response.WriteHeader(statusCode)
		_, _ = buf.WriteTo(response)
	})
	mux.HandleFunc("POST /count", func(response http.ResponseWriter, request *http.Request) {
		var td = TemplateData[struct {
		}]{receiver: receiver, response: response, request: request, pathsPrefix: pathsPrefix}
		buf := bytes.NewBuffer(nil)
		if err := templates.ExecuteTemplate(buf, "POST /count", &td); err != nil {
			slog.ErrorContext(request.Context(), "failed to render page", slog.String("path", request.URL.Path), slog.String("pattern", request.Pattern), slog.String("error", err.Error()))
			http.Error(response, "failed to render page", http.StatusInternalServerError)
			return
		}
		statusCode := cmp.Or(td.statusCode, td.errStatusCode, http.StatusOK)
		if td.redirectURL != "" {
			http.Redirect(response, request, td.redirectURL, statusCode)
			return
		}
		if contentType := response.Header().Get("content-type"); contentType == "" {
			response.Header().Set("content-type", "text/html; charset=utf-8")
		}
		response.Header().Set("content-length", strconv.Itoa(buf.Len()))
		response.WriteHeader(statusCode)
		_, _ = buf.WriteTo(response)
	})
	mux.HandleFunc("/decrement-count", func(response http.ResponseWriter, request *http.Request) {
		var td = TemplateData[int64]{receiver: receiver, response: response, request: request, pathsPrefix: pathsPrefix}
		if len(td.errList) == 0 {
			td.result = receiver.Decrement()
			td.okay = true
		}
		buf := bytes.NewBuffer(nil)
		if err := templates.ExecuteTemplate(buf, "/decrement-count Decrement()", &td); err != nil {
			slog.ErrorContext(request.Context(), "failed to render page", slog.String("path", request.URL.Path), slog.String("pattern", request.Pattern), slog.String("error", err.Error()))
			http.Error(response, "failed to render page", http.StatusInternalServerError)
			return
		}
		statusCode := cmp.Or(td.statusCode, td.errStatusCode, http.StatusOK)
		if td.redirectURL != "" {
			http.Redirect(response, request, td.redirectURL, statusCode)
			return
		}
		if contentType := response.Header().Get("content-type"); contentType == "" {
			response.Header().Set("content-type", "text/html; charset=utf-8")
		}
		response.Header().Set("content-length", strconv.Itoa(buf.Len()))
		response.WriteHeader(statusCode)
		_, _ = buf.WriteTo(response)
	})
	mux.HandleFunc("/increment-count", func(response http.ResponseWriter, request *http.Request) {
		var td = TemplateData[int64]{receiver: receiver, response: response, request: request, pathsPrefix: pathsPrefix}
		if len(td.errList) == 0 {
			td.result = receiver.Increment()
			td.okay = true
		}
		buf := bytes.NewBuffer(nil)
		if err := templates.ExecuteTemplate(buf, "/increment-count Increment()", &td); err != nil {
			slog.ErrorContext(request.Context(), "failed to render page", slog.String("path", request.URL.Path), slog.String("pattern", request.Pattern), slog.String("error", err.Error()))
			http.Error(response, "failed to render page", http.StatusInternalServerError)
			return
		}
		statusCode := cmp.Or(td.statusCode, td.errStatusCode, http.StatusOK)
		if td.redirectURL != "" {
			http.Redirect(response, request, td.redirectURL, statusCode)
			return
		}
		if contentType := response.Header().Get("content-type"); contentType == "" {
			response.Header().Set("content-type", "text/html; charset=utf-8")
		}
		response.Header().Set("content-length", strconv.Itoa(buf.Len()))
		response.WriteHeader(statusCode)
		_, _ = buf.WriteTo(response)
	})
	return TemplateRoutePaths{pathsPrefix: pathsPrefix}
}

type TemplateData[T any] struct {
	receiver      RoutesReceiver
	response      http.ResponseWriter
	request       *http.Request
	result        T
	statusCode    int
	errStatusCode int
	okay          bool
	errList       []error
	redirectURL   string
	pathsPrefix   string
}

func (data *TemplateData[T]) MuxtVersion() string {
	const muxtVersion = "(devel)"
	return muxtVersion
}

func (data *TemplateData[T]) Path() TemplateRoutePaths {
	return TemplateRoutePaths{pathsPrefix: data.pathsPrefix}
}

func (data *TemplateData[T]) Result() T {
	return data.result
}

func (data *TemplateData[T]) Request() *http.Request {
	return data.request
}

func (data *TemplateData[T]) StatusCode(statusCode int) *TemplateData[T] {
	data.statusCode = statusCode
	return data
}

func (data *TemplateData[T]) Header(key, value string) *TemplateData[T] {
	data.response.Header().Set(key, value)
	return data
}

func (data *TemplateData[T]) Ok() bool {
	return data.okay
}

func (data *TemplateData[T]) Err() error {
	return errors.Join(data.errList...)
}

func (data *TemplateData[T]) Receiver() RoutesReceiver {
	return data.receiver
}

func (data *TemplateData[T]) Redirect(url string, code int) (*TemplateData[T], error) {
	if code < 300 || code >= 400 {
		return data, fmt.Errorf("invalid status code %d for redirect", code)
	}
	data.redirectURL = url
	return data.StatusCode(code), nil
}

type TemplateRoutePaths struct {
	pathsPrefix string
}

func (routePaths TemplateRoutePaths) Count() string {
	return "/"
}

func (routePaths TemplateRoutePaths) CreateCount() string {
	return path.Join(cmp.Or(routePaths.pathsPrefix, "/"), "count")
}

func (routePaths TemplateRoutePaths) Decrement() string {
	return path.Join(cmp.Or(routePaths.pathsPrefix, "/"), "decrement-count")
}

func (routePaths TemplateRoutePaths) Increment() string {
	return path.Join(cmp.Or(routePaths.pathsPrefix, "/"), "increment-count")
}

// MIT License
//
// Copyright (c) 2025 Christopher Hunter
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

