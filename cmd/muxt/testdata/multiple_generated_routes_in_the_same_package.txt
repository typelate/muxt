muxt generate --output-template-data-type=D1 --output-receiver-interface=R1 --find-templates-variable=t1 --output-file=tr1.go --output-routes-func=Routes1 --output-template-route-paths-type=P1
muxt generate --output-template-data-type=D2 --output-receiver-interface=R2 --find-templates-variable=t2 --output-file=tr2.go --output-routes-func=Routes2 --output-template-route-paths-type=P2

muxt check --find-templates-variable=t1
muxt check --find-templates-variable=t2

cat tr1.go tr2.go

exec go test -cover

-- msg.gohtml --
{{define "message" }}Hello, world!{{end}}

-- t1.gohtml --
{{define "GET /" }}
	<h1>{{template "message"}}</h1>
{{end}}

-- t2.gohtml --
{{define "GET /" }}
	<h2>{{template "message"}}</h2>
{{end}}

-- go.mod --
module example.com

go 1.24
-- template.go --
package main

import (
	"embed"
	"html/template"
)

//go:embed msg.gohtml t1.gohtml
var t1src embed.FS

//go:embed msg.gohtml t2.gohtml
var t2src embed.FS

var (
	t1 = template.Must(template.ParseFS(t1src, "*"))
	t2 = template.Must(template.ParseFS(t2src, "*"))
)
-- template_test.go --
package main

import (
	"testing"

	"net/http"
	"net/http/httptest"
)

func Test1(t *testing.T) {
	mux := http.NewServeMux()

	Routes1(mux, nil)

	req := httptest.NewRequest(http.MethodGet, P1{}.ReadIndex(), nil)
	rec := httptest.NewRecorder()

	mux.ServeHTTP(rec, req)

	res := rec.Result()

	if res.StatusCode != http.StatusOK {
		t.Error("expected OK")
	}
}

func Test2(t *testing.T) {
	mux := http.NewServeMux()

	Routes2(mux, nil)

	req := httptest.NewRequest(http.MethodGet, P2{}.ReadIndex(), nil)
	rec := httptest.NewRecorder()

	mux.ServeHTTP(rec, req)

	res := rec.Result()

	if res.StatusCode != http.StatusOK {
		t.Error("expected OK")
	}
}
