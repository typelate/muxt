// package muxt
//
// Generate HTTP Endpoints from HTML Templates
//
//	 `muxt check`
//
//		  Do some static analysis on the templates.
//
//	 `muxt documentation`
//
//		  This work in progress command will
//
//	 `muxt generate`
//
//		  Use this command to generate template_routes.go
//
//		  Consider using a Go generate comment where your templates variable is declared.
//
//		  //go:generate muxt generate --receiver-type=Server
//	   var templates = templates = template.Must(template.ParseFS(templatesSource, "*.gohtml"))
//
//	 `muxt version`
//
//		  Print the version of muxt to standard out.
package main

import (
	"bytes"
	"fmt"
	"io"
	"log"
	"os"
	"runtime/debug"
	"time"

	"github.com/typelate/muxt/internal/configuration"
	"github.com/typelate/muxt/internal/muxt"
)

func main() {
	wd, err := os.Getwd()
	if err != nil {
		os.Exit(handleError(err))
	}
	if len(os.Args) == 1 {
		writeHelp(os.Stderr)
		return
	}
	os.Exit(handleError(command(wd, os.Args[1:], os.Getenv, os.Stdout, os.Stderr)))
}

func command(wd string, args []string, getEnv func(string) string, stdout, stderr io.Writer) error {
	var err error
	wd, args, err = configuration.Global(wd, args, stderr)
	if err != nil {
		return err
	}
	switch cmd, cmdArgs := args[0], args[1:]; cmd {
	case "generate", "gen", "g":
		return generateCommand(wd, cmdArgs, getEnv, stdout, stderr)
	case "version", "v":
		return versionCommand(stdout)
	case "check", "c", "typelate":
		return checkCommand(wd, cmdArgs, stderr)
	case "documentation", "docs", "d":
		return documentationCommand(wd, cmdArgs, stdout, stderr)
	default:
		return fmt.Errorf("unknown command")
	}
}

func handleError(err error) int {
	if err != nil {
		_, _ = os.Stderr.WriteString(err.Error() + "\n")
		return 1
	}
	return 0
}

func checkCommand(workingDirectory string, args []string, stderr io.Writer) error {
	config, err := configuration.NewRoutesFileConfiguration(args, stderr)
	if err != nil {
		return err
	}
	if err := muxt.Check(workingDirectory, log.New(stderr, "", 0), config); err != nil {
		return fmt.Errorf("fail: %s", err)
	}
	return nil
}

const (
	CodeGenerationComment = `// Code generated by muxt. DO NOT EDIT.` + "\n"
	CodeGenerationLicense = `// MIT License
//
// Copyright (c) %d %s
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
`
)

func generateCommand(workingDirectory string, args []string, getEnv func(string) string, stdout, stderr io.Writer) error {
	config, err := configuration.NewRoutesFileConfiguration(args, stderr)
	if err != nil {
		return err
	}
	if v, ok := cliVersion(); ok {
		config.MuxtVersion = v
	}
	files, err := muxt.TemplateRoutesFile(workingDirectory, log.New(stdout, "", 0), config)
	if err != nil {
		return err
	}
	for _, file := range files {
		var sb bytes.Buffer
		writeCodeGenerationComment(&sb)
		sb.WriteString(file.Content)
		if err := os.WriteFile(file.Path, sb.Bytes(), 0o644); err != nil {
			return err
		}
	}
	return nil
}

func writeCodeGenerationComment(w io.StringWriter) {
	_, _ = w.WriteString(fmt.Sprintf(CodeGenerationComment))
	if v, ok := cliVersion(); ok {
		_, _ = w.WriteString("// muxt version: ")
		_, _ = w.WriteString(v)
		_, _ = w.WriteString("\n//\n")
	}
	_, _ = w.WriteString(fmt.Sprintf(CodeGenerationLicense, time.Now().Year(), "Christopher Hunter"))
}

func writeHelp(stdout io.Writer) {
	_, _ = fmt.Fprintf(stdout, `muxt - Generate HTTP Endpoints from HTML Templates

muxt check

	Do some static analysis on the templates. 

muxt documentation

	This work in progress command will 

muxt generate

	Use this command to generate template_routes.go
	
	Consider using a Go generate comment where your templates variable is declared.

	  //go:generate muxt generate --%s=Server
      var templates = templates = template.Must(template.ParseFS(templatesSource, "*.gohtml"))

muxt version

	Print the version of muxt to standard out.

`, configuration.ReceiverStaticType)
}

func documentationCommand(wd string, args []string, stdout, stderr io.Writer) error {
	config, err := configuration.NewRoutesFileConfiguration(args, stderr)
	if err != nil {
		return err
	}
	return muxt.Documentation(stdout, wd, config)
}

func versionCommand(stdout io.Writer) error {
	v, ok := cliVersion()
	if !ok {
		return fmt.Errorf("missing CLI version")
	}
	_, err := fmt.Fprintln(stdout, v)
	return err
}

func cliVersion() (string, bool) {
	bi, ok := debug.ReadBuildInfo()
	if !ok || bi.Main.Version == "" {
		return "", false
	}
	return bi.Main.Version, true
}
